import argparse
import base64
import logging
import yaml
import os
import subprocess
import sys

def get_params(argv):
    params = {
        'log_level': {
            'default': 'INFO',
            'valid': [ 'INFO', 'DEBUG' ]
        },
        'kubernetes_object_kind': {
            'default': 'deployment',
            'valid': [ 'deployment', 'replicaset', 'pod', 'job', 'cronjob', 'statefulset' ]
        },
        'config_path_base': {
            'default': '/etc/helm_template_extractor/config',
            'valid': 'any directory on the system'
        },
        'namespace': {
            'default': 'default',
            'valid': 'any namespace'
        },
        'name': {
            'default': None,
            'valid': 'any name'
        },
        'chart': {
            'default': None,
            'valid': 'any chart path'
        },
        'helm_template_flags': {
            'default': '',
            'valid': 'any parameter that can be set to the `helm template` command'
        }
    }

    parser = argparse.ArgumentParser(description='Generate the configuration from a helm template attached to a specific kind of object (ex: deployment) as a configMap/secret')
    parser.add_argument('-l', '--log-level', nargs=1,
            default=[params["log_level"]["default"]], choices=params["log_level"]["valid"],
            help='Log level for the application on runtime')
    parser.add_argument('-k', '--kubernetes-object-kind', nargs=1,
            default=[params["kubernetes_object_kind"]["default"]], choices=params["kubernetes_object_kind"]["valid"],
            help='Kubernetes object kind for which configuration is extracted form chart')
    parser.add_argument('-c', '--config-path-base', nargs=1,
            default=[params["config_path_base"]["default"]],
            help='Folder where configuration generated by script should be stored')
    parser.add_argument('-n', '--namespace', nargs=1,
            default=[params["namespace"]["default"]],
            help='Kubernetes namespace used for deploy')
    parser.add_argument('name', nargs=1,
            help='Name of the install')
    parser.add_argument('chart', nargs=1,
            help='Path to chart folder')
    parser.add_argument('helm_template_flags', nargs='*',
            default=params["helm_template_flags"]["default"],
            help='Flags provided to the helm template command')

    args = parser.parse_args()
    params["log_level"]["default"] = args.log_level[0]
    params["kubernetes_object_kind"]["default"] = args.kubernetes_object_kind[0]
    params["config_path_base"]["default"] = args.config_path_base[0]
    params["namespace"]["default"] = args.namespace[0]
    params["name"]["default"] = args.name[0]
    params["chart"]["default"] = args.chart[0]
    params["helm_template_flags"]["default"] = args.helm_template_flags

    if params['log_level']['default'] == "INFO":
        params['log_level']['default'] = logging.INFO
    elif params['log_level']['default'] == "DEBUG":
        params['log_level']['default'] = logging.DEBUG

    return params


# set default logging
main = logging.getLogger()
main.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
main.addHandler(handler)

def extract_data(data, data_type):
    result = []

    for di in data:
        rdata = "unknown_data_type_case_check_error"
        if data_type == "configMap":
            rdata = data[di]
        elif data_type == "secret":
            rdata = base64.b64decode(data[di]).decode('utf-8')

        result.append({
            "file": di,
            "data": rdata
        })

    return result

def set_configs_pod(config_path_base, ko_spec, ko_metadata_name, ko_kind, ko_configmap_list, ko_secret_list):
    tracked_volumes = {}
    for volume in ko_spec['volumes']:
        if any(key in volume.keys() for key in ['secret', 'configMap']):
            tracked_volumes[volume['name']] = volume
        else:
            logging.debug("No configMap|secret key found for volume %s" % (volume))

    for container in ko_spec['containers']:
        for mount in container['volumeMounts']:
            if mount['name'] in tracked_volumes.keys():
                config_path = "%s/%s_%s/container_%s%s" % (config_path_base, ko_kind, ko_metadata_name, container['name'], mount['mountPath'])

                if not os.path.exists(config_path):
                    os.makedirs(config_path)

                trvn = tracked_volumes[mount['name']]
                kdata = []
                kdata_type = "unknown"
                if 'configMap' in trvn.keys():
                    kdata = ko_configmap_list[trvn['configMap']['name']]['data']
                    kdata_type = "configMap"
                elif 'secret' in trvn.keys():
                    kdata = ko_secret_list[trvn['secret']['secretName']]['data']
                    kdata_type = "secret"
                else:
                    logging.warning("Found mount that is not configMap or secret. Check it out: %s" % (mount))

                ked = extract_data(kdata, kdata_type)
                for ki in ked:
                    fn = "%s/%s" % (config_path, ki['file'])
                    logging.info("Generating %s" % (fn))
                    kcf = open(fn, "w")
                    kcf.write(ki['data'])
                    kcf.close()

            else:
                logging.debug("Found untraked mount %s" % (mount))

    return 0


def set_configs_deployment(config_path_base, doc, ko_configmap_list, ko_secret_list):
    tk = doc['kind'].lower()
    dn = doc['metadata']['name']
    ds = doc['spec']['template']['spec']

    result = set_configs_pod(config_path_base, ds, dn, tk, ko_configmap_list, ko_secret_list)

    return result

def get_helm_template_ouput(options):
    helm_dependency_update = ['helm', 'dependency', 'update', options['chart']['default']] # this is temporary shit!!!
    logging.debug("dependency update command: %s" % (" ".join(helm_dependency_update)))
    hdup = subprocess.run( helm_dependency_update, stdout=subprocess.PIPE )
    if hdup.returncode != 0:
        logging.info("Problem with helm template command!\nSTDOUT: %s\n\n\nSTDERR: %s\n\n" % (hdup.stdout, hdup.stderr))
        sys.exit(68)

    # update dependency
    helm_command = ["helm", "template"]
    helm_command.append(options['name']['default'])
    helm_command.append(options['chart']['default'])
    helm_command.extend(['-n', options['namespace']['default']])
    helm_command.extend(options['helm_template_flags']['default'])
    logging.debug("helm command looks like: %s" % (" ".join(helm_command)))

    helm_output_raw = subprocess.run( helm_command, stdout=subprocess.PIPE )

    if helm_output_raw.returncode != 0:
        logging.info("Problem with helm template command!\nSTDOUT: %s\n\n\nSTDERR: %s\n\n" % (helm_output_raw.stdout, helm_output_raw.stderr))
        sys.exit(69)

    helm_output_yaml = yaml.load_all(helm_output_raw.stdout)

    return helm_output_yaml


def parse_helm_template_output(params, helm_output_yaml):
    config_path_base = params['config_path_base']['default']
    ko_kind = params['kubernetes_object_kind']['default']

    ko_kind_list = []
    ko_configmap_list = {}
    ko_secret_list = {}

    for doc in helm_output_yaml:
        if doc is None:
            # wierd case - if you have '---' or empty file it will enter this case
            logging.debug("Wierd case! Found the following empty YAML object: %s" % doc)
            continue

        tmp_kind = doc['kind'].lower()
        message ="Looking into object %s with name %s" % (tmp_kind, doc['metadata']['name'])
        if tmp_kind == ko_kind:
            ko_kind_list.append(doc)
        elif tmp_kind == "configmap":
            ko_configmap_list[doc['metadata']['name']] = doc
        elif tmp_kind == "secret":
            ko_secret_list[doc['metadata']['name']] = doc
        else:
            message = "!!!Looking ingnored for object %s with name %s!!!" % (tmp_kind, doc['metadata']['name'])
        logging.debug(message)

    for koki in ko_kind_list:
        tmp_kind = koki['kind'].lower()

        if tmp_kind == 'pod':
            set_configs_pod(config_path_base, koki['spec'], koki['metadata']['name'], 'pod', ko_configmap_list, ko_secret_list)
        elif tmp_kind == 'deployment':
            set_configs_deployment(config_path_base, koki, ko_configmap_list, ko_secret_list)
        else:
            logging.critical("Method not implemented for kubernetes-object of kind %s" % (tmp_kind))
            sys.exit(69)

    return 0

if __name__ == "__main__":
    params = get_params(sys.argv)
    main.setLevel(params['log_level']['default'])

    helm_output_yaml = get_helm_template_ouput(params)
    parse_helm_template_output(params, helm_output_yaml)
